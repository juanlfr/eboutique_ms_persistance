version: '3.1'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mysql:
    image: mysql
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./src/main/resources/scripts/data.sql:/docker-entrypoint-initdb.d/data.sql
  ms-persistance:
    build: ..
    container_name: ms-persistance
    depends_on:
      - mysql
      - kafka
    ports:
      - "8080:8080"
    environment:
        SPRING_DATASOURCE_URL: ${DATASOURCE_URL}
        SPRING_DATASOURCE_USERNAME: ${DATASOURCE_USER}
        SPRING_DATASOURCE_PASSWORD: ${DATASOURCE_PSW}
        SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
        SPRING_KAFKA_CONSUMER_GROUP_ID: orders
  ms-order-collect:
    build: ../../../order-collect/order-collect
    container_name: ms-order-collect
    ports:
      - "8081:8081"
    expose:
      - "8081"
    depends_on:
      - kafka
    environment:
      SERVER_PORT: 8081
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer